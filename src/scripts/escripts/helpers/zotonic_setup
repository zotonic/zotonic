#!/usr/bin/env escript
%%
%% @author M, <tantemelki@gmail.com>
%% @copyright 2017
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%	 http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

%%
%% usage zotonic generate-edoc
%%

-export([require_zotonic_running/0,
    require_zotonic_not_running/0,
    get_zotonic_version/0,
    find_enabled_sites/1,
    find_config/1,
    consult_config/1,
    find_config_arg/1,
    get_user_sites_dir/0,
    get_user_modules_dir/0,
    get_user_ebin_dir/0,
    main/1]).

-include("zotonic_escript_helper.hrl").

main(_Arg) ->
    erlang:error(not_implemented).


require_zotonic_running() ->
    case net_adm:ping(?NODENAME) of
        ping ->
            halt();
        else ->
            io:format("Failed to connect to ~s@~s", [?NODENAME, ?NODEHOST]),
            io:format("Zotonic is not running. You need to start Zotonic to use this command."),
            halt(0)
    end.


require_zotonic_not_running() ->
    case net_adm:ping(?NODENAME) of
          ping ->
              io:format("Zotonic is already running as ~s@~s", [?NODENAME, ?NODEHOST]),
              io:format("You cannot start two Zotonic instances with the same node name.")
    end.

get_zotonic_version() ->
    {ok, VSN} = application:get_key(zotonic, vsn),
    io:format("Zotonic version is ~s~n", [VSN]).

find_enabled_sites(SiteDir) ->
    EnabledSites = [],
    case  filelib:is_dir(SiteDir) of
          true ->
              Path = list_to_atom("priv/sites" + SiteDir),
              case file:path_consult(Path, "config") of
                  {ok, Terms, "config"}  ->
                      Enabled = proplists:get_value("enabled", Terms),
                      case Enabled == true of
                           true ->
                               Site = SiteDir,
                               lists:append(EnabledSites, Site)
                      end
              end
    end.

find_config(FileName) ->
    VSN = get_zotonic_version(),
    File = list_to_atom(filename:absname(FileName)),
    FilePaths = ["$HOME/.zotonic/" + ?NODENAME + "/" + File, "$HOME/.zotonic/" + VSN + "/" + File,
        "$HOME/.zotonic/" + File, "/etc/zotonic/" + ?NODENAME + "/" +File,
        "/etc/zotonic/" + VSN + "/" + File, "/etc/zotonic/" + File],
    case lists:member(File, FilePaths) of
         true ->
             io:format("~s~n", [FileName])
    end.

consult_config([FileName, App, Key]) ->
    zotonic_consult_config:main([FileName, App, Key]).

find_config_arg([FileName, App, Key]) ->
    try
        case file:consult(FileName) of
            {error, Reason} ->
                io:format("error: Could not consult ~p: ~p", [FileName, Reason]);
            {ok, [Terms]} ->
                AppTerms = proplists:get_value(list_to_atom(App), Terms, []),
                io:format(proplists:get_value(list_to_atom(Key), AppTerms))
        end
    catch
        E:V ->
            io:format("error: Could not consult ~p, ~p:~p", [FileName, E, V])
    end.

get_user_sites_dir() ->
    File = find_config("zotonic.config"),
    consult_config([File, "zotonic", "user_sites_dir"]).

get_user_modules_dir() ->
    File = find_config("zotonic.config"),
    consult_config([File, "zotonic", "user_modules_dir"]).

get_user_ebin_dir() ->
    File = find_config("zotonic.config"),
    consult_config([File, "zotonic", "user_ebin_dir"]).
