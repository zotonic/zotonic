#!/usr/bin/env escript
%%! -pa zotonic/zotonic/ebin/ -Wall
%%
%% @author M, <tantemelki@gmail.com>
%% @copyright 2017
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%	 http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%
-export([main/1]).

-define(ZOTONIC, get_zotonic_path()).
-define(ZOTONIC_SCRIPTS, ?ZOTONIC ++ "/src/scripts").

get_zotonic_path() ->
    {ok, CurrentDir} = file:get_cwd(),
    _Dir = CurrentDir.

usage() ->
    {ok, ListItems} = file:list_dir(?ZOTONIC_SCRIPTS),
    FileNames = [ListItem || ListItem <- ListItems, string:length(ListItem) > 8],
    Names = string:split(FileNames, "zotonic-", all),
    [_|CommandNames] = Names,

    io:format("Usage: ~s (options) [command] ~n~n", [escript:script_name()]),
    io:format("Where [command] is one of: ~n"),
    io:format("~n~p ~n~n", [CommandNames]),
    io:format("See http://zotonic.com/docs/latest/manuals/cli.html for more info. ~n~n"),
    io:format("Options: ~n"),
    io:format("  -v : Prints Zotonic version ~n~n").

parse_zotonic_options() ->
    {ok, Version} = application:get_key(zotonic_core, vsn),
    io:format("Zotonic ~s~n", Version).

main(Command) ->
    case string:is_empty(Command) of
        true ->
            usage();
        false ->
            case string:equal(Command, "-v") of
                true  ->
                    parse_zotonic_options();
                false ->
                    SubScript = string:concat("zotonic-", Command),
                    ScriptFile = string:concat(?ZOTONIC_SCRIPTS, "/" ++ SubScript),
                    case filelib:is_file(ScriptFile) of
                        true  ->
                            apply(SubScript, main, []);
                        false ->
                            io:format("Command not found: ~s~n", [Command])
                    end

            end
    end.
