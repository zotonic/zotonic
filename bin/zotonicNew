#!/usr/bin/env escript
%% @author Blaise
%% @copyright 2017
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%	 http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%
-export([main/1]).

-define(ZOTONIC, get_zotonic_path()).
-define(COMMANDS, ?ZOTONIC ++ "/apps/zotonic_launcher/src/command").

get_zotonic_path() ->
    {ok, CurrentDir} = file:get_cwd(),
    _Dir = CurrentDir.

load_mod_paths() ->
    EbinPath = string:concat(?ZOTONIC, "/_build/default/lib"),
    case file:list_dir(EbinPath) of
        {ok, FileNames} ->
            lists:foreach(fun(Name) ->
                code:add_pathz(EbinPath ++ "/" ++ Name ++ "/ebin")
                          end, FileNames);
        {error, enoent} ->
            halt()
    end.

usage() ->
    {ok, ListItems} = file:list_dir(?COMMANDS),
    FileNames = [ListItem || ListItem <- ListItems, string:length(ListItem) > 12],
    Temp = string:split(FileNames, "zotonic_cmd_", all),
    Names = string:split(Temp, ".erl", all),
    [_|CommandNames] = Names,

    io:format("USAGE: ~s (options) [command] ~n~n", [escript:script_name()]),
    io:format("Where [command] is one of: ~n"),
    io:format("~n~s ~n~n", [CommandNames]),
    io:format("See http://zotonic.com/docs/latest/manuals/cli.html for more info. ~n~n"),
    io:format("Options: ~n"),
    io:format("  -v : Prints Zotonic version ~n~n").

main([]) ->
    usage();

main([Command|T]) ->
    SubCmd = lists:flatten(T),
    load_mod_paths(),

    case string:equal(Command, "-v") of
        true ->
            zotonic_release:run();
        false ->
            CommandName = string:concat("zotonic_cmd_", Command),
            CommandMod = string:concat(CommandName, ".erl"),
            CommandFile = string:concat(?COMMANDS, "/" ++ CommandMod),

            io:format(CommandFile),

            case filelib:is_file(CommandFile) of
                true ->
                    apply(list_to_atom(CommandName), run, [SubCmd]);
                false ->
                    io:format("Command not found: ~s~n", [Command])
            end
    end.
